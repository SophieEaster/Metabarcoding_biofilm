---
title: "Metabarcoding_biofilm"
format: 
  html:
    self-contained: true
    toc: true
    number-sections: true
    style: "floating"
editor_options: 
  chunk_output_type: console
---

# xxx Title of the paper xxx

xxx Authors

R script written by Sophie Oster\
checked by xxx

\
RPTU Kaiserslautern-Landau\
Fortstrasse 7\
76829 Landau in der Pfalz\
GERMANY

This study was conducted with four treatments and three time points explanatory variables depending on the endpoint:

-   treatment (categorical)

    -   uncontaminated control (negative control, NC)

    -   herbicide propyzamide (Pro)
    
    -   herbicide diuron (Diu)

    -   antibiotic ciprofloxacin (Cip)


# R version 4.3.2
R version used for this script: 4.3.2, use the following code chunk to download the correct version.
```{r}
# # Check the current R version
# current_r_version <- as.character(getRversion())
# 
# # Specify the required R version
# required_r_version <- "4.3.2"
# 
# if (current_r_version != required_r_version) {
#   # Install 'rig' if not already installed
#   if (!requireNamespace("rig", quietly = TRUE)) {
#     install.packages("rig")
#   }
#   
#   # Load the 'rig' package
#   library(rig)
#   
#   # Check if the required R version is installed
#   installed_versions <- rig::rig_ls()
#   if (!(required_r_version %in% installed_versions$version)) {
#     # Install the required R version using 'rig'
#     rig::rig_add(required_r_version)
#   }
#   
#   # Set the required R version as default
#   rig::rig_default(required_r_version)
#   
#   # Notify the user about the version change
#   stop(paste("Please restart R using version", required_r_version, "and rerun the script."))
# } else {
#   message("You are already using the correct R version:", required_r_version)
# }
```


# Packages in a reproducible environment
```{r}
#| message: false
#| warning: false
# Restore the environment:
# renv::restore()
# renv::init() 
# renv::snapshot()

source("code/00_setup.R")
```


# Biofilm data
```{r}
df_biofilm <- 
read.delim("data/biofilm_endpoints.txt") %>%
  tidyr::separate(
    sample,
    into = c("exp", "treat", "repl", "day")
  ) %>%
  dplyr::filter(day == "T14", treat != "Diu") 

# Test for concentrations
df_biofilm %>%
  tidyr::pivot_longer(
    afdw:chlc
  ) %>% 
  tidyr::nest(.by = c(season, media, name)) %>%
  dplyr::mutate(
    p_kruskal = purrr::map_dbl(
      data, function(x) {
        kruskal.test(
          value ~ concentration, 
          data = x 
        )$p.value
      }
    )
  ) %>%
  dplyr::mutate(
    p_kruskal = p.adjust(p_kruskal, method = "BH")
  )

# Test for media
df_biofilm %>%
  tidyr::pivot_longer(
    afdw:chlc
  ) %>% 
  tidyr::nest(.by = c(season, name)) %>%
  dplyr::mutate(
    p_kruskal = purrr::map_dbl(
      data, function(x) {
        kruskal.test(
          value ~ media, 
          data = x 
        )$p.value
      }
    )
  ) %>%
  dplyr::mutate(
    p_kruskal = p.adjust(p_kruskal, method = "BH")
  )

df_biofilm %>%
  tidyr::pivot_longer(
    afdw:chlc
  ) %>% 
  dplyr::mutate(
    season = ifelse(season == "w", "Winter", "Summer"),
    media = stringr::str_to_title(media),
    name = stringr::str_to_upper(name)
  ) %>%
  ggplot(aes(concentration, value)) +
  stat_summary(
    aes(color = factor(concentration)),
    fun.min = min,
    fun.max = max,
    geom = "errorbar",
    linewidth = 2.25,
    width = 0,
    alpha = 0.6
  ) +
  geom_point(
    aes(color = factor(concentration)),
    alpha = 0.7,
    shape = 16,
    size = 2
    ) +
  stat_summary(
    fun = mean,
    geom = "point",
    shape = 18,
    size = 2,
    color = "#ffffff",
    alpha = 0.7
  ) +
  scale_x_continuous(
    breaks = c(0, 10^(0:4))
  ) +
  scale_y_continuous(
    breaks = c(0, 2^(-2:5))
  ) +
  coord_trans(
    x = scales::pseudo_log_trans(sigma = 0.1),
    y = scales::pseudo_log_trans(sigma = 0.1)
  ) +
  labs(
    y = NULL,
    x = "Concentration (µg/L)"
  ) +
  scico::scale_color_scico_d(end = 0.8, palette = "batlow", guide = "none") +
  ggh4x::facet_nested(
    name ~ season + media,
    scales = "free"
  ) 

ggsave(
  "output/biofilm_parameters.png",
  width = 16.5,
  height = 12,
  units = "cm",
  dpi = 600
)
```

# Prokaryotes

## Data loading and wrangling
```{r}
prokaryotes <-
  read.table("data/ASV_prokaryotes.txt",
             header = TRUE, sep = "\t") %>%
  tibble::tibble()

field_communities <- paste0("P", c(13, 21, 36))

prokaryotes_field <- prokaryotes %>% 
  dplyr::select(
    dplyr::any_of(
      c("asv", field_communities, "taxonomy_prokaryotes")
      )
    )

prokaryotes <- prokaryotes %>% 
  dplyr::select(!dplyr::any_of(field_communities)) %>%
  dplyr::arrange(asv)

# Extract ASV with too less findings
rows_to_keep <-
prokaryotes %>% 
  dplyr::select_if(is.numeric) %>%
  rowSums() > 5


# Percentage removed by omitting row sums smaller or equal to 5
paste(round(100 * (1 - sum(rows_to_keep) / nrow(prokaryotes)), 2), "%")

prokaryotes <- prokaryotes[rows_to_keep, ]

# Taxonomy
tax_ranks <- c("kingdom", "phylum", "class", "order", "family", "genus", "species")

# Add taxonomny in columns
prokaryotes_long <-
  prokaryotes %>%
  # dplyr::select(taxonomy_prokaryotes) %>%
  tidyr::separate(
    taxonomy_prokaryotes,
    into = tax_ranks,
    sep = ","
  ) %>%
  dplyr::mutate(
    dplyr::across(
      dplyr::any_of(tax_ranks),
      ~stringr::str_remove(.x, ".*:")
    )
  ) %>%
  tidyr::pivot_longer(
    cols = dplyr::starts_with("P", ignore.case = FALSE),
    values_to = "reads",
    names_to = "sample"
  )

# Add more sample information
prokaryotes_sample_info <-
  read.table("data/prokaryotes_sample_info.txt",
             header = TRUE, sep = "\t")

# Combine with main table
prokaryotes_long <- prokaryotes_long %>%
  left_join(prokaryotes_sample_info, by = "sample")

prokaryotes_long %>%
 dplyr::summarise(
   dplyr::across(
     dplyr::any_of(tax_ranks),
     ~sum(is.na(.x)) / length(.x)
  )
)

# dann relative abundance pro probe berechnen 
prokaryotes_long <-
  prokaryotes_long %>%
  dplyr::mutate(
    RA = reads / sum(reads),
    .after = reads,
    .by = sample
    )
```

## Ordination and PERMANOVA
```{r}
prok_analyzed <- 
prokaryotes_long %>%
  dplyr::group_by(exp, day) %>%
  tidyr::nest() %>%
  dplyr::mutate(
    obj = purrr::map(
      data, ~wcmd_and_adonis(.x)
    ),
    wcmd = purrr::map(
      obj, ~.x$wcmd
    ),
    permanova = purrr::map_dbl(
      obj, ~.x$adonis %>% as.data.frame %>% dplyr::slice(1) %>% dplyr::pull(5)
    )
  ) %>%
  tidyr::unnest(wcmd)

prok_analyzed <- 
  prok_analyzed %>%
  dplyr::filter(day == 14)

prok_analyzed_sign <- 
prok_analyzed %>%
  dplyr::group_by(day, exp, media) %>%
  dplyr::reframe(
    sign = unique(permanova)
  ) %>%
    dplyr::mutate(
    season = ifelse(exp %in% c(1, 4), "Winter", "Summer")
  )

conc_fac <- levels(factor(prok_analyzed$concentration_ug_L))
colors <- 
  scico::scico(length(conc_fac), end = 0.8, palette = "batlow") %>%
  colorspace::lighten(0.2)
names(colors) <- levels(factor(prok_analyzed$concentration_ug_L))

prok_nmds <-
prok_analyzed %>%
  dplyr::mutate(
    connect = ifelse(chemical %in% c("control", "diuron"), 1, NA),
    season = ifelse(exp %in% c(1, 4), "Winter", "Summer")
  ) %>%
  ggplot(aes(WCMD1, WCMD2)) +
  geom_vline(xintercept = 0, linetype = 2, linewidth = 0.2, color = "#aaaaaa") +
  geom_hline(yintercept = 0, linetype = 2, linewidth = 0.2, color = "#aaaaaa") +
  geom_line(
    data = . %>% tidyr::drop_na(connect),
    aes(group = connect),
    linetype = 2, linewidth = 0.4,
    color = "#333333"
  ) +
  geom_point(
    aes(
      shape = stringr::str_to_title(chemical),
      fill = factor(concentration_ug_L)
      ),
    size = 2
  ) +
  geom_label(
    data = prok_analyzed_sign,
    aes(label = paste("p = ", round(sign, 3)), x = 0.75, y = -0.3),
    size = 6 / ggplot2:::.pt,
    fill = "#ffffff88",
    label.size = 0,
    hjust = 1,
    vjust = 0
  ) +
  scale_shape_manual(values = c(21, 22, 24, 25)) +
  scale_fill_manual(values = colors) +
  guides(
    fill = 
      guide_legend(
        ncol = 4,
        override.aes = list(shape = 21)
        ),
    shape = 
      guide_legend(
        ncol = 2
        )
    ) +
  ggh4x::facet_nested_wrap(
    ~season + stringr::str_to_title(media), 
    ncol = 1,
    strip.position = "right"
    ) +
  labs(
    y = NULL,
    fill = "Concentration (µg/L)",
    shape = "Chemical"
  ) +
  theme_bw() +
  theme(
    text = element_text(size = 8),
    panel.grid.major = element_line(linewidth = 0.1, color = "#cccccc"),
    panel.grid.minor = element_line(linewidth = 0.05, color = "#cccccc"),
    strip.background.y = ggh4x::element_part_rect(side = "l", fill = NA),
    strip.text.y = element_text(size = 6, face = "bold"),
    legend.position = "bottom",
    legend.title.position = "top",
    legend.key.spacing.x = unit(0, "mm"),
    legend.key.spacing.y = unit(0, "mm"),
    legend.key.size = unit(4, "mm")
  )

ggsave(
  "output/prokaryotes.png",
  prok_nmds,
  width = 16.5,
  height = 5,
  units = "cm",
  dpi = 600
)
```

## SIMPER
```{r}
prok_simper <- 
prokaryotes_long %>%
  dplyr::filter(day == 14) %>%
  dplyr::group_by(exp, day) %>% 
  tidyr::nest() %>%
  dplyr::mutate(
    simper_data = purrr::map(
      data, simper_summary, tax_level = "class"
    )
  ) %>%
  tidyr::unnest(simper_data) %>%
  dplyr::mutate(
    media = ifelse(exp %in% c(1, 3), "Borgmann", "Kuhl"),
    season = ifelse(exp %in% c(1, 4), "Winter", "Summer"),
  ) %>%
  ggplot(aes(y = weighted_rel_change, x = class)) +
  geom_segment(
    mapping = aes(
      color = factor(concentration_ug_L),
      yend = 1
      ),
    linewidth = 1.25,
    position = position_dodge(0.75),
    size = 1.8
  ) +
  geom_hline(yintercept = 1, linewidth = 0.3, color = "#000000") +
  scale_color_manual(values = colors, guide = "none") +
  scale_fill_manual(values = colors, guide = "none") +
  scale_y_continuous(
    transform = scales::pseudo_log_trans(sigma = 1/128),
    breaks = c(1/64, 1/16, 1/4, 1, 4, 16, 64),
    labels = c("<b style = 'font-size: 8px'><sup>1</sup>&frasl;<sub>64</sub></b>",
               "<b style = 'font-size: 8px'><sup>1</sup>&frasl;<sub>16</sub></b>",
               "<b style = 'font-size: 8px'><sup>1</sup>&frasl;<sub>4</sub></b>",
               "1", "4", "16", "64")
  ) +
  coord_flip(
    ylim = c(1/64, 64)
  ) +
  ggh4x::facet_nested_wrap(
    ~season + stringr::str_to_title(media), 
    scales = "free_y",
    strip.position = "right",
    ncol = 1
  ) +
  labs(
    x = NULL, y = "Fold change"
  ) +
  theme_bw() +
  theme(
    text = element_text(size = 8),
    panel.grid.major = element_line(linewidth = 0.1, color = "#cccccc"),
    panel.grid.minor = element_line(linewidth = 0.05, color = "#cccccc"),
    axis.text.y = ggtext::element_markdown(),
    axis.text.x = ggtext::element_markdown(),
    strip.text.y = element_blank(),
    strip.background.y = element_blank(),
    legend.position = "bottom"
  )

prok_simper | prok_nmds

ggsave(
  "output/prokaryotes_both.png",
  prok_simper | prok_nmds +
    patchwork::plot_layout(
      guides = "collect"
    ) &
    theme(
      legend.position = "bottom",
      legend.margin = margin(),
      legend.spacing = unit(0, "mm")
      ),
  width = 16.5,
  height = 16,
  units = "cm",
  dpi = 600
)
```

```{r}
prokaryotes_long %>%
  dplyr::filter(day == 14) %>%
  dplyr::group_by(exp, day, concentration_ug_L) %>%
  dplyr::summarise(
    shannon = vegan::diversity(RA),
    simpson = vegan::diversity(RA, index = "simpson"),
    richness = sum(RA > 0),
    evenness = shannon / log(richness)
  ) %>%
  tidyr::pivot_longer(
    c(shannon, simpson, richness, evenness)
  ) %>% 
  ggplot(aes(concentration_ug_L, value, color = name)) +
  geom_line() +
  stat_smooth(method = "lm") +
  scale_x_continuous(
    transform = scales::pseudo_log_trans(),
    breaks = c(0, 10^(0:4))
  ) +
  facet_grid(name~exp+day, scales = "free")
```

# Eukaryotes

## Data loading and wrangling
```{r}
eukaryotes <-
  read.table("data/ASV_eukaryotes.txt",
             header = TRUE, sep = "\t") %>%
  tibble::tibble()

field_communities <- paste0("E", c(13, 21, 36)) # E21 pool fail --> has to be removed

eukaryotes_field <- eukaryotes %>% 
  dplyr::select(
    dplyr::any_of(
      c("asv", field_communities, "taxonomy_eukaryotes")
      )
    )

eukaryotes <- eukaryotes %>% 
  dplyr::select(!dplyr::any_of(field_communities)) %>%
  dplyr::arrange(asv)

# Extract ASV with too less findings
rows_to_keep <-
eukaryotes %>% 
  dplyr::select_if(is.numeric) %>%
  rowSums() > 5


# Percentage removed by omitting row sums smaller or equal to 5
paste(round(100 * (1 - sum(rows_to_keep) / nrow(eukaryotes)), 2), "%")

eukaryotes <- eukaryotes[rows_to_keep, ]

# Taxonomy
tax_ranks <- c("domain", "kingdom", "phylum", "class", "order", "family", "genus", "species")

# Add taxonomny in columns
eukaryotes_long <-
  eukaryotes %>%
  # dplyr::select(taxonomy_eukaryotes) %>%
  tidyr::separate(
    taxonomy_eukaryotes,
    into = tax_ranks,
    sep = ","
  ) %>% 
  dplyr::mutate(
    dplyr::across(
      dplyr::any_of(tax_ranks),
      ~stringr::str_remove(.x, ".*:")
    )
  ) %>%
  tidyr::pivot_longer(
    cols = dplyr::starts_with("E", ignore.case = FALSE),
    values_to = "reads",
    names_to = "sample"
  )

# Add more sample information
eukaryotes_sample_info <-
  read.table("data/prokaryotes_sample_info.txt",
             header = TRUE, sep = "\t") %>%
  dplyr::mutate(
    sample = stringr::str_replace(sample, "P", "E")
  )

# Combine with main table
eukaryotes_long <- eukaryotes_long %>%
  left_join(eukaryotes_sample_info, by = "sample")

eukaryotes_long %>%
 dplyr::summarise(
   dplyr::across(
     dplyr::any_of(tax_ranks),
     ~sum(is.na(.x)) / length(.x)
  )
)

# dann relative abundance pro probe berechnen 
eukaryotes_long <-
  eukaryotes_long %>%
  dplyr::mutate(
    RA = reads / sum(reads),
    .after = reads,
    .by = sample
    )
```

## Ordination and PERMANOVA
```{r}
euk_analyzed <- 
eukaryotes_long %>%
  dplyr::group_by(exp, day) %>%
  tidyr::nest() %>%
  dplyr::mutate(
    obj = purrr::map(
      data, ~wcmd_and_adonis(.x)
    ),
    wcmd = purrr::map(
      obj, ~.x$wcmd
    ),
    permanova = purrr::map_dbl(
      obj, ~.x$adonis %>% as.data.frame %>% dplyr::slice(1) %>% dplyr::pull(5)
    )
  ) %>%
  tidyr::unnest(wcmd)

euk_analyzed <- 
  euk_analyzed %>%
  dplyr::filter(day == 14)

euk_analyzed_sign <- 
euk_analyzed %>%
  dplyr::group_by(day, exp, media) %>%
  dplyr::reframe(
    sign = unique(permanova)
  ) %>%
    dplyr::mutate(
    season = ifelse(exp %in% c(1, 4), "Winter", "Summer")
  )

conc_fac <- levels(factor(euk_analyzed$concentration_ug_L))
colors <- 
  scico::scico(length(conc_fac), end = 0.8, palette = "batlow") %>%
  colorspace::lighten(0.2)
names(colors) <- levels(factor(euk_analyzed$concentration_ug_L))

euk_nmds <-
euk_analyzed %>%
  dplyr::mutate(
    connect = ifelse(chemical %in% c("control", "diuron"), 1, NA),
    season = ifelse(exp %in% c(1, 4), "Winter", "Summer")
  ) %>%
  ggplot(aes(WCMD1, WCMD2)) +
  geom_vline(xintercept = 0, linetype = 2, linewidth = 0.2, color = "#aaaaaa") +
  geom_hline(yintercept = 0, linetype = 2, linewidth = 0.2, color = "#aaaaaa") +
  geom_line(
    data = . %>% tidyr::drop_na(connect),
    aes(group = connect),
    linetype = 2, linewidth = 0.4,
    color = "#333333"
  ) +
  geom_point(
    aes(
      shape = stringr::str_to_title(chemical),
      fill = factor(concentration_ug_L)
      ),
    size = 2
  ) +
  geom_label(
    data = euk_analyzed_sign,
    aes(label = paste("p = ", round(sign, 3)), x = 0.75, y = -0.3),
    size = 6 / ggplot2:::.pt,
    fill = "#ffffff88",
    label.size = 0,
    hjust = 1,
    vjust = 0
  ) +
  scale_shape_manual(values = c(21, 22, 24, 25)) +
  scale_fill_manual(values = colors) +
  guides(
    fill = 
      guide_legend(
        ncol = 4,
        override.aes = list(shape = 21)
        ),
    shape = 
      guide_legend(
        ncol = 2
        )
    ) +
  ggh4x::facet_nested_wrap(
    ~season + stringr::str_to_title(media), 
    ncol = 1,
    strip.position = "right"
    ) +
  labs(
    y = NULL,
    fill = "Concentration (µg/L)",
    shape = "Chemical"
  ) +
  theme_bw() +
  theme(
    text = element_text(size = 8),
    panel.grid.major = element_line(linewidth = 0.1, color = "#cccccc"),
    panel.grid.minor = element_line(linewidth = 0.05, color = "#cccccc"),
    strip.background.y = ggh4x::element_part_rect(side = "l", fill = NA),
    strip.text.y = element_text(size = 6, face = "bold"),
    legend.position = "bottom",
    legend.title.position = "top",
    legend.key.spacing.x = unit(0, "mm"),
    legend.key.spacing.y = unit(0, "mm"),
    legend.key.size = unit(4, "mm")
  )

ggsave(
  "output/eukaryotes.png",
  euk_nmds,
  width = 16.5,
  height = 5,
  units = "cm",
  dpi = 600
)
```

## SIMPER
```{r}
euk_simper <- 
eukaryotes_long %>%
  dplyr::filter(day == 14) %>%
  dplyr::group_by(exp, day) %>% 
  tidyr::nest() %>%
  dplyr::mutate(
    simper_data = purrr::map(
      data, simper_summary, tax_level = "class"
    )
  ) %>%
  tidyr::unnest(simper_data) %>%
  dplyr::mutate(
    media = ifelse(exp %in% c(1, 3), "Borgmann", "Kuhl"),
    season = ifelse(exp %in% c(1, 4), "Winter", "Summer"),
  ) %>%
  ggplot(aes(y = weighted_rel_change, x = class)) +
  geom_segment(
    mapping = aes(
      color = factor(concentration_ug_L),
      yend = 1
      ),
    linewidth = 1.25,
    position = position_dodge(0.75),
    size = 1.8
  ) +
  geom_hline(yintercept = 1, linewidth = 0.3, color = "#000000") +
  scale_color_manual(values = colors, guide = "none") +
  scale_fill_manual(values = colors, guide = "none") +
  scale_y_continuous(
    transform = scales::pseudo_log_trans(sigma = 1/128),
    breaks = c(1/64, 1/16, 1/4, 1, 4, 16, 64),
    labels = c("<b style = 'font-size: 8px'><sup>1</sup>&frasl;<sub>64</sub></b>",
               "<b style = 'font-size: 8px'><sup>1</sup>&frasl;<sub>16</sub></b>",
               "<b style = 'font-size: 8px'><sup>1</sup>&frasl;<sub>4</sub></b>",
               "1", "4", "16", "64")
  ) +
  coord_flip(
    ylim = c(1/64, 64)
  ) +
  ggh4x::facet_nested_wrap(
    ~season + stringr::str_to_title(media), 
    scales = "free_y",
    strip.position = "right",
    ncol = 1
  ) +
  labs(
    x = NULL, y = "Fold change"
  ) +
  theme_bw() +
  theme(
    text = element_text(size = 8),
    panel.grid.major = element_line(linewidth = 0.1, color = "#cccccc"),
    panel.grid.minor = element_line(linewidth = 0.05, color = "#cccccc"),
    axis.text.y = ggtext::element_markdown(),
    axis.text.x = ggtext::element_markdown(),
    strip.text.y = element_blank(),
    strip.background.y = element_blank(),
    legend.position = "bottom"
  )

euk_simper | euk_nmds

ggsave(
  "output/eukaryotes_both.png",
  euk_simper | euk_nmds +
    patchwork::plot_layout(
      guides = "collect"
    ) &
    theme(
      legend.position = "bottom",
      legend.margin = margin(),
      legend.spacing = unit(0, "mm")
      ),
  width = 16.5,
  height = 16,
  units = "cm",
  dpi = 600
)
```

```{r}
eukaryotes_long %>%
  dplyr::filter(day == 14) %>%
  dplyr::group_by(exp, day, concentration_ug_L) %>%
  dplyr::summarise(
    shannon = vegan::diversity(RA),
    simpson = vegan::diversity(RA, index = "simpson"),
    richness = sum(RA > 0),
    evenness = shannon / log(richness)
  ) %>%
  tidyr::pivot_longer(
    c(shannon, simpson, richness, evenness)
  ) %>% 
  ggplot(aes(concentration_ug_L, value, color = name)) +
  geom_line() +
  stat_smooth(method = "lm") +
  scale_x_continuous(
    transform = scales::pseudo_log_trans(),
    breaks = c(0, 10^(0:4))
  ) +
  facet_grid(name~exp+day, scales = "free")
```

## Effects within each experiment?
## NMDS experiment 1:
```{r}
# pro_exp1 <- prokaryotes_long %>%
#   dplyr::filter(exp == 1)
# 
# # pristine rauswerfen
# pro_exp1 <- pro_exp1 %>%
#   filter(!(chemical %in% c("pristine")))
# 
# # hier jetzt viele ASVs mit überall 0 - Werten --> rauswerfen dann für einzelne Versuche?
# pro_exp1_filtered <- pro_exp1[, colSums(pro_exp1 != 0) > 0]
# # von 13796 ASVs auf 1782 reduziert
# 
# # calculate relative abundance
# # first change character to numeric:
# pro_exp1_filtered <- pro_exp1_filtered %>%
#   mutate(across(starts_with("ASV"), as.numeric))
# 
# 
# pro_exp1_filtered <- pro_exp1_filtered %>%
#   rowwise() %>%
#   mutate(
#     total_abundance = sum(c_across(starts_with("ASV"))),  # Calculate total abundance per sample
#     across(starts_with("ASV"), ~ .x / total_abundance, .names = "rel_{col}") # Calculate relative abundance
#   ) %>%
#   ungroup()
# 
# # delete AVS columns and keep relative abundances:
# pro_exp1_filtered <- pro_exp1_filtered %>%
#   dplyr::select(-starts_with("ASV"))
# 
# # delete first 7 columns for metaMDS
# pro_exp1_filtered <- pro_exp1_filtered[, -c(1, 2, 3, 4, 5, 6, 7)]
# 
# # The Hellinger transformation reduces the impact of large abundances while emphasizing relative differences.
# 
# # metaMDS
# NMDS_pro_exp1 <-
#   metaMDS(
#     pro_exp1_filtered,
#     autotransform = FALSE,
#     k = 2 ,
#     distance = "bray",
#     na.rm = TRUE
#   )
# 
# NMDS_pro_exp1$stress
# 
# # exctract NMDS scores
# nmds_scores_exp1 <- as.data.frame(scores(NMDS_pro_exp1, display = "sites"))
# 
# # delete pristine from prokaryotes_sample_info
# prokaryotes_sample_info <- prokaryotes_sample_info %>%
#   filter(!(chemical %in% c("pristine")))
# 
# # add treatment column to NMDS scores
# Day            <- prokaryotes_sample_info $ day[prokaryotes_sample_info $ exp == "1"]
# Treatments     <- prokaryotes_sample_info $ chemical[prokaryotes_sample_info $ exp == "1"]
# Concentration  <- prokaryotes_sample_info $ concentration_ug_L[prokaryotes_sample_info $ exp == "1"]
# 
# nmds_scores_exp1 $ Treatment = Treatments
# nmds_scores_exp1 $ Day = Day
# nmds_scores_exp1 $ Concentration = Concentration
# 
# 
# # For the plot: reorder treatment variable in data.scores_snail_absolute
# nmds_scores_exp1 $ Treatment <- factor(
#   nmds_scores_exp1 $ Treatment,
#   levels = c("control", "ciprofloxacin", "diuron", "pristine")
# )
# 
# 
# NMDS_pro_exp1_plot <- ggplot(data = nmds_scores_exp1, aes(x = NMDS1, y = NMDS2)) +
#   geom_point(
#         aes(shape = Treatment, color = Treatment),
#     size = 5,
#     alpha = 1,
#     show.legend = TRUE
#   )
# 
# NMDS_pro_exp1_plot
```

## NMDS experiment 2:
```{r}
# pro_exp2 <- prokaryotes %>%
#   filter(!(exp %in% c(1, 3, 4))) 
# 
# pro_exp2 <- pro_exp2[, -c(1, 2, 3, 4, 5, 6)]
# 
# # numeric values
# pro_exp2 <- pro_exp2 %>%
#   mutate(across(everything(), as.numeric))
# 
# NMDS_pro_exp2 <-
#   metaMDS(
#     pro_exp2,
#     autotransform = FALSE,
#     k = 2 ,
#     distance = "bray",
#     na.rm = TRUE
#   )
# 
# NMDS_pro_exp2$stress
# 
# # exctract NMDS scores
# nmds_scores_exp2 <- as.data.frame(scores(NMDS_pro_exp2, display = "sites"))
# 
# # add treatment column to NMDS scores
# Day        <- prokaryotes_sample_info $ day[prokaryotes_sample_info $ exp == "2"]
# Treatments <- prokaryotes_sample_info $ chemical[prokaryotes_sample_info $ exp == "2"]
# Concentration <- prokaryotes_sample_info $ concentration_ug_L[prokaryotes_sample_info $ exp == "2"]
# 
# nmds_scores_exp2 $ Treatment = Treatments
# nmds_scores_exp2 $ Day = Day
# nmds_scores_exp2 $ Concentration = Concentration
# 
# 
# # For the plot: reorder treatment variable in data.scores_snail_absolute
# nmds_scores_exp2 $ Treatment <- factor(
#   nmds_scores_exp2 $ Treatment,
#   levels = c("control", "diuron", "pristine", "propyzamide")
# )
# 
# 
# NMDS_pro_exp2_plot <- ggplot(data = subset(nmds_scores_exp2, Treatment != "pristine"), 
#                              aes(x = NMDS1, y = NMDS2)) +
#   geom_point(
#     aes(shape = Treatment, color = Treatment),
#     size = 5,
#     alpha = 1,
#     show.legend = TRUE
#   )
# 
# 
# NMDS_pro_exp2_plot
```

## NMDS experiment 3:
```{r}
# pro_exp3 <- prokaryotes %>%
#   filter(!(exp %in% c(1, 2, 4))) 
# 
# pro_exp3 <- pro_exp3[, -c(1, 2, 3, 4, 5, 6)]
# 
# # numeric values
# pro_exp3 <- pro_exp3 %>%
#   mutate(across(everything(), as.numeric))
# 
# NMDS_pro_exp3 <-
#   metaMDS(
#     pro_exp3,
#     autotransform = FALSE,
#     k = 2 ,
#     distance = "bray",
#     na.rm = TRUE
#   )
# 
# NMDS_pro_exp3$stress
# 
# # exctract NMDS scores
# nmds_scores_exp3 <- as.data.frame(scores(NMDS_pro_exp3, display = "sites"))
# 
# # add treatment column to NMDS scores
# Day        <- prokaryotes_sample_info $ day[prokaryotes_sample_info $ exp == "3"]
# Treatments <- prokaryotes_sample_info $ chemical[prokaryotes_sample_info $ exp == "3"]
# Concentration <- prokaryotes_sample_info $ concentration_ug_L[prokaryotes_sample_info $ exp == "3"]
# 
# nmds_scores_exp3 $ Treatment = Treatments
# nmds_scores_exp3 $ Day = Day
# nmds_scores_exp3 $ Concentration = Concentration
# 
# 
# # For the plot: reorder treatment variable in data.scores_snail_absolute
# nmds_scores_exp3 $ Treatment <- factor(
#   nmds_scores_exp3 $ Treatment,
#   levels = c("control", "diuron", "pristine", "propyzamide")
# )
# 
# 
# NMDS_pro_exp3_plot <- ggplot(data = subset(nmds_scores_exp3, Treatment != "pristine"), 
#                              aes(x = NMDS1, y = NMDS2)) +
#   geom_point(
#     aes(shape = Treatment, color = Treatment),
#     size = 5,
#     alpha = 1,
#     show.legend = TRUE
#   )
# 
# 
# NMDS_pro_exp3_plot
```














# Eukaryotes

Load data
```{r}
# ASV_eukaryotes <- 
#   read.xlsx(file.path(prj, "data", "ASV_eukaryotes.xlsx"),
#             colNames = TRUE, rowNames = TRUE)
# 
# View(ASV_eukaryotes)
# colnames(ASV_eukaryotes)

```

