---
title: "Metabarcoding_biofilm"
format: 
  html:
    self-contained: true
    toc: true
    number-sections: true
    style: "floating"
editor_options: 
  chunk_output_type: console
---

# Functional stability despite structural changes in freshwater biofilm communities exposed to an antibiotic and an herbicide - the role of nutrient conditions

Sophie Oster, Eric Bollinger, Verena C. Schreiner, Tobias Schmitt, Sabine Filker & Mirco Bundschuh

R script written by Eric Bollinger and Sophie Oster\

\
RPTU Kaiserslautern-Landau\
Fortstrasse 7\
76829 Landau in der Pfalz\
GERMANY

Four independent chronic (14 days) exposure experiments were conducted in an indoor stream microcosm facility with freshwater biofilm in the RPTU in Landau, Germany. These studies were conducted with four chemical treatments and two different nutrient media:

-   treatment/chemical stressor 

    -   uncontaminated control (negative control, NC)

    -   herbicide propyzamide (Pro, 1, 10, 100, 1000, 10000 ug L-1)

    -   antibiotic ciprofloxacin (Cip, 1, 10, 1000, 1000 ug L-1)

-   media/nutrients

    -   SAM S5 (low nutrient media)
    
    -   Kuhl (high nutrient media)
    
As functional endpoints the two parameters ash free dry weight (AFDW) and the photosynthetic pigments (chlorophyll a, b & c) were measured. As structural endpoints DNA metabarcoding was conducted to investigate the prokaryotic and eukaryotic communities. 

# R version 4.3.2
R version used for this script: 4.3.2, use the following code chunk to download the correct version.
```{r}
# # Check the current R version
# current_r_version <- as.character(getRversion())
# 
# # Specify the required R version
# required_r_version <- "4.3.2"
# 
# if (current_r_version != required_r_version) {
#   # Install 'rig' if not already installed
#   if (!requireNamespace("rig", quietly = TRUE)) {
#     install.packages("rig")
#   }
#   
#   # Load the 'rig' package
#   library(rig)
#   
#   # Check if the required R version is installed
#   installed_versions <- rig::rig_ls()
#   if (!(required_r_version %in% installed_versions$version)) {
#     # Install the required R version using 'rig'
#     rig::rig_add(required_r_version)
#   }
#   
#   # Set the required R version as default
#   rig::rig_default(required_r_version)
#   
#   # Notify the user about the version change
#   stop(paste("Please restart R using version", required_r_version, "and rerun the script."))
# } else {
#   message("You are already using the correct R version:", required_r_version)
# }
```


# Packages in a reproducible environment
```{r, message=FALSE, warning=FALSE}
# Restore the environment:
# renv::restore()

source("code/00_setup.R")
```


# Functional endpoints
```{r, warning=FALSE}
# AFDW unit: mg / cm2
# chlorophyll a,b & c unit: ug / cm2
df_biofilm <- 
read.delim("data/biofilm_endpoints.txt") %>%
  tidyr::separate(
    sample,
    into = c("exp", "treat", "repl", "day")
  )
    
# Separate day 14 treatments after chronic exposure 
df_biofilm <- df_biofilm %>%
  dplyr::filter(day == "T14")

# Rename media
df_biofilm <- df_biofilm %>%   
    mutate(media = case_when(
    media == "borgmann" ~ "Low-Nutrient",
    media == "kuhl" ~ "High-Nutrient",
    TRUE ~ media
  ))

# Statistics
# Test for concentrations
df_biofilm %>%
  tidyr::pivot_longer(
    AFDW:Chlc
  ) %>% 
  tidyr::nest(.by = c(season, media, name)) %>%
  dplyr::mutate(
    p_kruskal = purrr::map_dbl(
      data, function(x) {
        kruskal.test(
          value ~ concentration, 
          data = x 
        )$p.value
      }
    )
  ) %>%
  dplyr::mutate(
    p_kruskal = p.adjust(p_kruskal, method = "BH")
  )

# Test for media
df_biofilm %>%
  tidyr::pivot_longer(
    AFDW:Chlc
  ) %>% 
  tidyr::nest(.by = c(season, name)) %>%
  dplyr::mutate(
    p_kruskal = purrr::map_dbl(
      data, function(x) {
        kruskal.test(
          value ~ media, 
          data = x 
        )$p.value
      }
    )
  ) %>%
  dplyr::mutate(
    p_kruskal = p.adjust(p_kruskal, method = "BH")
  )


# Calculate mean afdw, chla, chlb and chlc
mean_biofilm_endpoints <-
df_biofilm %>%
  dplyr::filter(exp %in% c("1", "2", "3", "4"), 
                media %in% c("Low-Nutrient", "High-Nutrient")) %>%
  dplyr::group_by(exp, treat, media, season) %>%
  dplyr::summarise(
    mean_afdw = mean(AFDW, na.rm = TRUE),
    mean_chla = mean(Chla, na.rm = TRUE),
    mean_chlb = mean(Chlb, na.rm = TRUE),
    mean_chlc = mean(Chlc, na.rm = TRUE),
    .groups = "drop"
    )

# Define custom colors for each concentration
conc_levels <- levels(factor(df_biofilm$concentration))
conc_colors <- scico::scico(length(conc_levels), end = 0.8, palette = "batlow")
names(conc_colors) <- conc_levels
conc_colors["0"] <- "grey60" 

# Plot
df_biofilm %>%
  tidyr::pivot_longer(
    AFDW:Chlc
  ) %>% 
  mutate(
  name = factor(name,
    levels = c("AFDW", "Chla", "Chlb", "Chlc"),
    labels = c(
      "AFDW\n(mg cm⁻²)",
      "Chla\n(µg cm⁻²)",
      "Chlb\n(µg cm⁻²)",
      "Chlc\n(µg cm⁻²)"
    )
  )
)%>% 
  dplyr::mutate(
    season = ifelse(season == "w", "Winter", "Summer"),
    media = stringr::str_to_title(media),
    treat = dplyr::case_when(
      treat == "NC" & exp == 1 ~ "Ciprofloxacin",
      treat == "NC" & exp == 2 ~ "Ciprofloxacin",
      treat == "NC" & exp == 3 ~ "Propyzamide",
      treat == "NC" & exp == 4 ~ "Propyzamide",
      stringr::str_detect(treat, "Cip") ~ "Ciprofloxacin",
      stringr::str_detect(treat, "Pro") ~ "Propyzamide",  
      TRUE ~ treat 
    ),
    facet_label = paste0(season, " - ", treat) 
  ) %>%
  ggplot(aes(concentration, value)) +
  stat_summary(
    aes(color = factor(concentration)),
    fun.min = min,
    fun.max = max,
    geom = "errorbar",
    linewidth = 2.25,
    width = 0,
    alpha = 0.6
  ) +
  geom_point(
    aes(color = factor(concentration)),
    alpha = 0.7,
    shape = 16,
    size = 2
  ) +
  stat_summary(
    fun = mean,
    geom = "point",
    shape = 18,
    size = 2,
    color = "#ffffff",
    alpha = 0.7
  ) +
  scale_x_continuous(
    breaks = c(0, 10^(0:4))
  ) +
  scale_y_continuous(
    breaks = c(0, 0.25, 0.5, 1, 2, 4, 8, 16, 32),
    #breaks = c(0, 2^(-2:5)),
    labels = function(x) gsub("\\.0+$", "", x)
  ) +
  coord_trans(
    x = scales::pseudo_log_trans(sigma = 0.1),
    y = scales::pseudo_log_trans(sigma = 0.1)
  ) +
  labs(
    y = NULL,
    x = expression("Concentration (" * µg ~ L^-1 * ")")
  ) +
  scale_color_manual(values = conc_colors, guide = "none") +
  ggh4x::facet_nested(
    name ~ facet_label + media,
    scales = "free"
  ) +
  theme(
    text = element_text(size = 9),
    axis.title.x = element_text(face = "bold"),
    axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1),
    strip.text.x = element_text(size = 9),
    strip.text.y = element_text(size = 9),
    panel.grid.minor.x = element_blank(),
    panel.grid.minor.y = element_blank(),
    axis.ticks.x = element_line(),
    axis.ticks.y = element_line()
)

# Save the plot
ggsave(
  "output/biofilm_parameters.png",
  width = 16.5,
  height = 12,
  units = "cm",
  dpi = 600
)

# Save as vector graphic, minor adaptions for better readability with Inkscape
ggsave(
  "output/biofilm_parameters.svg",
  device = "svg",
  width = 16.5,
  height = 16,
  units = "cm",
  dpi = 600
)

```

# Prokaryotes

## Data loading and wrangling
```{r, warning=FALSE}
prokaryotes <-
  read.table("data/ASV_prokaryotes.txt",
             header = TRUE, sep = "\t") %>%
  tibble::tibble()

field_communities <- paste0("P", c(13, 36))

prokaryotes_field <- prokaryotes %>% 
  dplyr::select(
    dplyr::any_of(
      c("asv", field_communities, "taxonomy_prokaryotes")
      )
    )

prokaryotes <- prokaryotes %>% 
  dplyr::select(!dplyr::any_of(field_communities)) %>%
  dplyr::arrange(asv)

# Extract ASV with too less findings
rows_to_keep <-
prokaryotes %>% 
  dplyr::select_if(is.numeric) %>%
  rowSums() > 5


# Percentage removed by omitting row sums smaller or equal to 5
paste(round(100 * (1 - sum(rows_to_keep) / nrow(prokaryotes)), 2), "%")

prokaryotes <- prokaryotes[rows_to_keep, ]

# Taxonomy
tax_ranks_prok <- c("kingdom", "phylum", "class", "order", "family", "genus", "species")

# Add taxonomny in columns
prokaryotes_long <-
  prokaryotes %>%
  # dplyr::select(taxonomy_prokaryotes) %>%
  tidyr::separate(
    taxonomy_prokaryotes,
    into = tax_ranks_prok,
    sep = ","
  ) %>%
  dplyr::mutate(
    dplyr::across(
      dplyr::any_of(tax_ranks_prok),
      ~stringr::str_remove(.x, ".*:")
    )
  ) %>%
  tidyr::pivot_longer(
    cols = dplyr::starts_with("P", ignore.case = FALSE),
    values_to = "reads",
    names_to = "sample"
  )

# Add more sample information
prokaryotes_sample_info <-
  read.table("data/prokaryotes_sample_info.txt",
             header = TRUE, sep = "\t")

# Combine with main table
prokaryotes_long <- prokaryotes_long %>%
  left_join(prokaryotes_sample_info, by = "sample")

prokaryotes_long %>%
 dplyr::summarise(
   dplyr::across(
     dplyr::any_of(tax_ranks_prok),
     ~sum(is.na(.x)) / length(.x)
  )
)

# Relative Abundance
prokaryotes_long <-
  prokaryotes_long %>%
  dplyr::mutate(
    RA = reads / sum(reads),
    .after = reads,
    .by = sample
    )

# Rename media
prokaryotes_long <- prokaryotes_long %>%
    mutate(media = case_when(
    media == "borgmann" ~ "Low-Nutrient",
    media == "kuhl" ~ "High-Nutrient",
    TRUE ~ media
  ))


# Calculate percentage of data present in tax columns 
# Subset the dataframe to the relevant columns
columns_of_interest_prok <- c("phylum", "class", "order", "family", "genus", "species")
data_subset_prok <- prokaryotes_long[, columns_of_interest_prok]

# Calculate the percentage of non-missing values per column
missing_percentage_prok_tax <- colSums(!is.na(data_subset_prok)) / nrow(data_subset_prok) * 100

# View the result
missing_percentage_prok_tax
```

## Ordination and PERMANOVA
```{r, warning=FALSE}
prok_analyzed <-
prokaryotes_long %>%
  dplyr::group_by(exp) %>%
  tidyr::nest() %>%
  dplyr::mutate(
    obj = purrr::map(
      data, ~ wcmd_and_adonis(.x)
    ),
    wcmd = purrr::map(
      obj, ~.x$wcmd
    ),
    permanova = purrr::map_dbl(
      obj, ~.x$adonis %>% as.data.frame %>% dplyr::slice(1) %>% dplyr::pull(5)
    )
  ) %>%
  tidyr::unnest(wcmd)

prok_analyzed$obj[[1]]

prok_analyzed_sign <-
prok_analyzed %>%
  dplyr::group_by(exp, media) %>%
  dplyr::reframe(
    sign = unique(permanova)
  ) %>%
    dplyr::mutate(
    season = ifelse(exp %in% c(1, 2), "Winter", "Summer")
  )

conc_fac <- levels(factor(prok_analyzed$concentration_ug_L))
colors <-
  scico::scico(length(conc_fac), end = 0.8, palette = "batlow") %>%
  colorspace::lighten(0.2)
names(colors) <- conc_fac
colors["0"] <- "grey60"

# Plot
prok_wpca <-
prok_analyzed %>%
  dplyr::mutate(
    season = ifelse(exp %in% c(1, 2), "Winter", "Summer"),
    chemical = factor(
      stringr::str_to_title(chemical),
      levels = c("Control", "Ciprofloxacin", "Propyzamide")
    )
  ) %>%
  ggplot(aes(WCMD1, WCMD2)) +
  geom_vline(xintercept = 0, linetype = 2, linewidth = 0.2, color = "#aaaaaa") +
  geom_hline(yintercept = 0, linetype = 2, linewidth = 0.2, color = "#aaaaaa") +
  geom_point(
    aes(
      shape = chemical,
      fill = factor(concentration_ug_L)
    ),
    size = 3
  ) +
  geom_label(
    data = prok_analyzed_sign,
    aes(label = paste("p = ", round(sign, 3)), x = 0.75, y = -0.3),
    size = 7 / ggplot2:::.pt,
    fill = "#ffffff88",
    label.size = 0,
    hjust = 1,
    vjust = 0
  ) +
  scale_shape_manual(
    values = c("Control" = 21, "Ciprofloxacin" = 25, "Propyzamide" = 25)
  ) +
  scale_fill_manual(values = colors) +
  guides(
    fill = guide_legend(
      ncol = 4,
      override.aes = list(shape = 25)
    ),
    shape = guide_legend(
      title = "Chemical",
      ncol = 1
    )
  ) +
  ggh4x::facet_nested_wrap(
    ~season + stringr::str_to_title(media),
    ncol = 1,
    strip.position = "right"
  ) +
  labs(
    y = NULL,
    x = "WPCA1",
    fill = expression("Concentration (" * µg ~ L^-1 * ")"),
    shape = "Chemical"
  ) +
  theme_bw() +
  theme(
    text = element_text(size = 9),
    axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1),
    panel.grid.major = element_line(linewidth = 0.1, color = "#cccccc"),
    panel.grid.minor = element_line(linewidth = 0.05, color = "#cccccc"),
    strip.background.y = ggh4x::element_part_rect(side = "l", fill = NA),
    strip.text.y = element_text(size = 7, face = "bold"),
    legend.position = "bottom",
    legend.title.position = "top",
    legend.key.spacing.x = unit(1, "mm"),
    legend.key.spacing.y = unit(0, "mm"),
    legend.key.size = unit(4, "mm")
  )

prok_wpca

ggsave(
  "output/prokaryotes_wpca.png",
  prok_wpca,
  width = 16.5,
  height = 16,
  units = "cm",
  dpi = 600
)

# Save as vector graphic, minor adaptions for better readability with Inkscape
ggsave(
  "output/prokaryotes_wpca.svg",
  prok_wpca,
  device = "svg",
  width = 16.5,
  height = 16,
  units = "cm",
  dpi = 600
)

```

## SIMPER
```{r, warning=FALSE, message=FALSE}
# SIMPER on phylum basis
prok_simper_phylum <- 
prokaryotes_long %>%
  dplyr::group_by(exp) %>% 
  tidyr::nest() %>%
  dplyr::mutate(
    simper_data = purrr::map(
      data, function(x) {
        df_for_simper <-
          x %>%
          dplyr::bind_rows(x)
        simper_summary(df_for_simper, tax_level = "phylum")
      }
    )
  ) %>%
  tidyr::unnest(simper_data) %>%
  dplyr::mutate(
    media = ifelse(exp %in% c(1, 3), "Low-Nutrient", "High-Nutrient"),
    season = ifelse(exp %in% c(1, 2), "Winter", "Summer"),
  ) %>%
  ggplot(aes(y = weighted_rel_change, x = phylum)) +
  geom_segment(
    mapping = aes(
      color = factor(concentration_ug_L),
      yend = 1
      ),
    linewidth = 1.25,
    position = position_dodge(0.75),
    size = 1.8
  ) +
  geom_hline(yintercept = 1, linewidth = 0.3, color = "#000000") +
  scale_color_manual(values = colors, guide = "none") +
  scale_fill_manual(values = colors, guide = "none") +
  scale_y_continuous(
    transform = scales::pseudo_log_trans(sigma = 1/128),
    breaks = c(1/256, 1/64, 1/16, 1/4, 1, 4, 16, 64),
    labels = c("1/256","1/64","1/16", "1/4", "1", "4", "16", "64")
  ) +
  coord_flip(
    ylim = c(1/256, 64)
  ) +
  ggh4x::facet_nested_wrap(
    ~season + stringr::str_to_title(media), 
    scales = "free_y",
    strip.position = "right",
    ncol = 1
  ) +
  labs(
    x = NULL, y = "Fold change"
  ) +
  theme_bw() +
  theme(
    text = element_text(size = 9),
    panel.grid.major = element_line(linewidth = 0.1, color = "#cccccc"),
    panel.grid.minor = element_line(linewidth = 0.05, color = "#cccccc"),
    axis.text.y = ggtext::element_markdown(),
    #axis.text.x = ggtext::element_markdown(),
    axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1),
    strip.text.y = element_blank(),
    strip.background.y = element_blank(),
    legend.position = "bottom"
  )


prok_simper_phylum | prok_wpca

# Save as vector graphic, minor adaptions for better readability with Inkscape
ggsave(
  "output/prokaryotes_both_phylum_level.svg",
  prok_simper_phylum | prok_wpca,
  device = "svg",
  width = 16.5,
  height = 16,
  units = "cm",
  dpi = 600
)


# SIMPER on family basis
prok_simper_family <- 
prokaryotes_long %>%
  dplyr::group_by(exp) %>% 
  tidyr::nest() %>%
  dplyr::mutate(
    simper_data = purrr::map(
      data, function(x) {
        df_for_simper <-
          x %>%
          dplyr::bind_rows(x)
        simper_summary(df_for_simper, tax_level = "family")
      }
    )
  ) %>%
  tidyr::unnest(simper_data) %>%
  dplyr::mutate(
    media = ifelse(exp %in% c(1, 3), "Low-Nutrient", "High-Nutrient"),
    season = ifelse(exp %in% c(1, 2), "Winter", "Summer"),
  ) %>%
  ggplot(aes(y = weighted_rel_change, x = family)) +
  geom_segment(
    mapping = aes(
      color = factor(concentration_ug_L),
      yend = 1
      ),
    linewidth = 1.25,
    position = position_dodge(0.75),
    size = 1.8
  ) +
  geom_hline(yintercept = 1, linewidth = 0.3, color = "#000000") +
   scale_color_manual(values = colors, guide = "none") +
   scale_fill_manual(values = colors, guide = "none") +
 scale_y_continuous(
  transform = scales::pseudo_log_trans(sigma = 1/128),
  breaks = c(1/64, 1/16, 1/4, 1, 4, 16, 64, 256),
  labels = c("1/64","1/16", "1/4", "1", "4", "16", "64", "256")
  ) +
  coord_flip(
    ylim = c(1/256, 256)
  ) +
  ggh4x::facet_nested_wrap(
    ~season + stringr::str_to_title(media), 
    scales = "free_y",
    strip.position = "right",
    ncol = 1
  ) +
  labs(
    x = NULL, y = "Fold change"
  ) +
  theme_bw() +
  theme(
    text = element_text(size = 9),
    axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1),
    panel.grid.major = element_line(linewidth = 0.1, color = "#cccccc"),
    panel.grid.minor = element_line(linewidth = 0.05, color = "#cccccc"),
    axis.text.y = ggtext::element_markdown(),
   # axis.text.x = ggtext::element_markdown(),
    strip.text.y = element_blank(),
    strip.background.y = element_blank(),
    legend.position = "bottom"
  )


prok_simper_family | prok_wpca

# Save as vector graphic, minor adaptions for better readability with Inkscape
ggsave(
  "output/prokaryotes_both_family_level.svg",
  prok_simper_family | prok_wpca,
  device = "svg",
  width = 16.5,
  height = 16,
  units = "cm",
  dpi = 600
)
```

## Diversity indices
```{r, warning=FALSE, message=FALSE}
# Diversity indices, only descriptive 
prokaryotes_long %>%
  dplyr::group_by(exp, concentration_ug_L) %>%
  dplyr::summarise(
    shannon = vegan::diversity(RA),
    simpson = vegan::diversity(RA, index = "simpson"),
    richness = sum(RA > 0),
    evenness = shannon / log(richness)
  ) %>%
  print(n = 50)

# Plot
exp_labels <- c(
  "1" = "Winter Low-Nutrient, Cip",
  "2" = "Winter High-Nutrient, Cip",
  "3" = "Summer Low-Nutrient, Pro",
  "4" = "Summer High-Nutrient, Pro"
)

# Process the main dataset 
prok_diversity <- prokaryotes_long %>%
  dplyr::group_by(exp, concentration_ug_L) %>%
  dplyr::summarise(
    shannon = vegan::diversity(RA),
    simpson = vegan::diversity(RA, index = "simpson"),
    richness = sum(RA > 0),
    evenness = shannon / log(richness),
    .groups = "drop"
  ) %>%
  tidyr::pivot_longer(c(shannon, simpson, richness, evenness)) %>%
  dplyr::mutate(
    name = stringr::str_to_title(name),
    exp = factor(exp, levels = c("4", "3", "2", "1"))
  )


# Plot 
prok_diversity_indices <-
ggplot() +
  geom_line(data = prok_diversity, aes(concentration_ug_L, value, color = name)) +
  stat_smooth(data = prok_diversity, aes(concentration_ug_L, value, color = name), method = "lm", se = TRUE) +
  scale_x_continuous(
    trans = scales::pseudo_log_trans(),
    breaks = c(0, 1, 10, 100, 1000, 10000),
    labels = c("0", "1", "10", "100", "1000", "10000")  
  ) +

  facet_grid(name ~ exp, scales = "free", labeller = labeller(exp = exp_labels)) +

  labs(
    y = NULL,
    x = expression("Concentration (" * µg ~ L^-1 * ")"),
    shape = "Chemical"
  ) +

  theme(
    legend.position = "none",
    panel.grid.minor.x = element_blank(),
    panel.grid.minor.y = element_blank(),
    axis.text.x = element_text(angle = 45, hjust = 1) 
  )


prok_diversity_indices

ggsave(
  "output/prokaryotes_diversity_indices.png",
  prok_diversity_indices,
  width = 16.5,
  height = 16,
  units = "cm",
  dpi = 600
)

# Save as vector graphic, minor adaptions for better readability with Inkscape
ggsave(
  "output/prokaryotes_diversity_indices.svg",
  prok_diversity_indices,
  device = "svg",
  width = 16.5,
  height = 16,
  units = "cm",
  dpi = 600
)

```
## Stacked bar plots
```{r, warning=FALSE}
# Define a 43-color palette
custom_palette <- c(
  "#1B1811", "#377EB8", "#4DAF4A", "#984EA3", "#FF7F00", "#FFFF33", "#A65628", "#E41A1C", "#999999",
  "#66C2A5", "#FC8D62", "#8DA0CB", "#E78AC3", "#A6D854", "#FFD92F", "#E5C494", "#B3B3B3", "#1B9E77",
  "#D95F02", "#7570B3", "#E7298A", "#66A61E", "#E6AB02", "#A6761D", "#666666", "#8C510A", "#BF812D",
  "#DFC27D", "#F6E8C3", "#01665E", "#35978F", "#80CDC1", "#C7EAE5", "#003C30", "#A50026", "#D73027",
  "#F46D43", "#FDAE61", "#FEE08B", "#D9EF8B", "#66BD63", "#1A9850", "#006837"
)

# Renaming for plot
prokaryotes_long <- prokaryotes_long %>%
  mutate(exp = factor(exp, 
                      levels = c(1, 2, 3, 4), 
                      labels = c("Winter Low-Nutrient", 
                                 "Winter High-Nutrient", 
                                 "Summer Low-Nutrient",
                                 "Summer High-Nutrient")))


# Stacked bar plot phylum level
prokaryotes_long <- prokaryotes_long %>%
  mutate(
    sample = factor(sample, levels = unique(sample)),  
    concentration_ug_L = factor(concentration_ug_L, levels = c("0", "1", "10", "100", "1000", "10000"))  
  )

sample_to_concentration <- setNames(prokaryotes_long$concentration_ug_L, prokaryotes_long$sample)


prok_barplot_phylum <- prokaryotes_long %>%
  group_by(sample, phylum, exp) %>%
  summarise(RA = sum(RA), .groups = "drop") %>%
  ggplot(aes(x = sample, y = RA, fill = phylum)) +
  geom_bar(stat = "identity") +
  labs(x = "Sample", y = "Abundance", fill = "Phylum") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
  scale_fill_manual(values = custom_palette) +
  facet_wrap(~exp, ncol = 2, scales = "free_x") +
  scale_x_discrete(labels = function(x) {
    concentration_mapping <- setNames(prokaryotes_long$concentration_ug_L, prokaryotes_long$sample)
    concentration_mapping[x]  
  })

  
prok_barplot_phylum

ggsave(
  "output/prok_barplot_phylum.png",
  prok_barplot_phylum,
  width = 16.5,
  height = 16,
  units = "cm",
  dpi = 600,
  bg = "white" 
)

# Save as vector graphic, minor adaptions for better readability with Inkscape
ggsave(
  "output/prok_barplot_phylum.svg",
  prok_barplot_phylum,
  device = "svg",
  width = 16.5,
  height = 16,
  units = "cm",
  dpi = 600
)


# Barplot for Proteobacteria family
# plot only top 6 families across all data (not just per sample) for better overview
top_families_prokaryotes <- prokaryotes_long %>%
  filter(phylum == "Proteobacteria") %>%
  group_by(family) %>%
  summarise(total_RA = sum(RA, na.rm = TRUE)) %>%
  top_n(6, total_RA) %>%
  pull(family)


prok_barplot_proteobacteria <- prokaryotes_long %>%
  filter(phylum == "Proteobacteria") %>%
  mutate(family = ifelse(family %in% top_families_prokaryotes, family, "Other"))  %>%
  group_by(sample, family, exp) %>%
  summarise(RA = sum(RA, na.rm = TRUE), .groups = "drop") %>%
  group_by(sample, exp) %>%
  mutate(RA_normalized = RA / sum(RA)) %>%
  ungroup() %>%
  ggplot(aes(x = sample, y = RA_normalized, fill = family)) +
  geom_bar(stat = "identity") +
  labs(x = "Sample", y = "Relative Abundance (normalized)", fill = "Family") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
  scale_fill_manual(values = custom_palette) +
  facet_wrap(~exp, ncol = 2, scales = "free_x") +
  scale_x_discrete(labels = function(x) {
    concentration_mapping <- setNames(prokaryotes_long$concentration_ug_L, prokaryotes_long$sample)
    concentration_mapping[x]
  })



prok_barplot_proteobacteria

ggsave(
  "output/prok_barplot_proteobacteria.png",
  prok_barplot_proteobacteria,
  width = 25,
  height = 20,
  units = "cm",
  dpi = 600,
  bg = "white" 
)

# Save as vector graphic, minor adaptions for better readability with Inkscape
ggsave(
  "output/prok_barplot_proteobacteria.svg",
  prok_barplot_proteobacteria,
  device = "svg",
  width = 16.5,
  height = 16,
  units = "cm",
  dpi = 600
)

```

## Prokaryotes field
```{r, warning=FALSE}
# Prokaryotes field
# Extract ASV with too less findings
rows_to_keep <-
prokaryotes_field %>% 
  dplyr::select_if(is.numeric) %>%
  rowSums() > 5

# Percentage removed by omitting row sums smaller or equal to 5
paste(round(100 * (1 - sum(rows_to_keep) / nrow(prokaryotes_field)), 2), "%")

prokaryotes_field <- prokaryotes_field[rows_to_keep, ]


# Add taxonomny in columns
prokaryotes_field_long <-
  prokaryotes_field %>%
  tidyr::separate(
    taxonomy_prokaryotes,
    into = tax_ranks_prok,
    sep = ","
  ) %>%
  dplyr::mutate(
    dplyr::across(
      dplyr::any_of(tax_ranks_prok),
      ~stringr::str_remove(.x, ".*:")
    )
  ) %>%
  tidyr::pivot_longer(
    cols = dplyr::starts_with("P", ignore.case = FALSE),
    values_to = "reads",
    names_to = "sample"
  )

# Relative Abundance
prokaryotes_field_long <-
  prokaryotes_field_long %>%
  dplyr::mutate(
    RA = reads / sum(reads),
    .after = reads,
    .by = sample
    )

# Stacked bar plot - phylum level
# only 6 most abundant phyla
top_phyla_prok_field <- prokaryotes_field_long %>%
  group_by(phylum) %>%
  summarise(total_RA = sum(RA, na.rm = TRUE)) %>%
  top_n(6, total_RA) %>%
  pull(phylum)


prok_field_barplot_phylum <- prokaryotes_field_long %>%
  mutate(phylum = ifelse(phylum %in% top_phyla_prok_field, phylum, "Other")) %>%
  group_by(sample, phylum) %>%
  summarise(RA = sum(RA, na.rm = TRUE), .groups = "drop") %>%
  mutate(phylum = factor(phylum, levels = c(top_phyla_prok_field, "Other"))) %>%
  ggplot(aes(x = sample, y = RA, fill = phylum)) +
  geom_bar(stat = "identity") +
  labs(x = NULL, y = "Abundance", fill = "Phylum") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
  scale_fill_manual(values = custom_palette) +
  scale_x_discrete(labels = c("P13" = "Winter", "P36" = "Summer"))


prok_field_barplot_phylum

ggsave(
  "output/prokaryotes_field_phylum.png",
  prok_field_barplot_phylum,
  width = 16.5,
  height = 16,
  units = "cm",
  dpi = 600,
  bg = "white" 
)

# Save as vector graphic, minor adaptions for better readability with Inkscape
ggsave(
  "output/prokaryotes_field_phylum.svg",
  prok_field_barplot_phylum,
  device = "svg",
  width = 16.5,
  height = 16,
  units = "cm",
  dpi = 600
)

# Diversity indices
prokaryotes_field_long %>%
  dplyr::group_by(sample) %>%
  dplyr::summarise(
    shannon = vegan::diversity(RA),
    simpson = vegan::diversity(RA, index = "simpson"),
    richness = sum(RA > 0),
    evenness = shannon / log(richness)
  ) 
```


# Eukaryotes

## Data loading and wrangling
```{r, warning=FALSE}
eukaryotes <-
  read.table("data/ASV_eukaryotes.txt",
             header = TRUE, sep = "\t") %>%
  tibble::tibble()

field_communities <- paste0("E", c(13, 36)) 

eukaryotes_field <- eukaryotes %>% 
  dplyr::select(
    dplyr::any_of(c("asv", field_communities, "taxonomy_eukaryotes"))
  )

eukaryotes <- eukaryotes %>% 
  dplyr::select(!dplyr::any_of(field_communities)) %>%
  dplyr::arrange(asv)

# Extract ASV with too less findings
rows_to_keep <-
eukaryotes %>% 
  dplyr::select_if(is.numeric) %>%
  rowSums() > 5

# Percentage removed by omitting row sums smaller or equal to 5
paste(round(100 * (1 - sum(rows_to_keep) / nrow(eukaryotes)), 2), "%")

eukaryotes <- eukaryotes[rows_to_keep, ]

# New tax ranks
tax_ranks_euk <- c("domain" ,"kingdom", "phylum", "class", "order", "family", "genus", "species")

# Add taxonomny in columns
eukaryotes_long <-
  eukaryotes %>%
  # dplyr::select(taxonomy_eukaryotes) %>%
  tidyr::separate(
    taxonomy_eukaryotes,
    into = tax_ranks_euk,
    sep = ","
  ) %>% 
  dplyr::mutate(
    dplyr::across(
      dplyr::any_of(tax_ranks_euk),
      ~stringr::str_remove(.x, ".*:")
    )
  ) %>%
  tidyr::pivot_longer(
    cols = dplyr::starts_with("E", ignore.case = FALSE),
    values_to = "reads",
    names_to = "sample"
  )

# Add more sample information
eukaryotes_sample_info <-
  read.table("data/prokaryotes_sample_info.txt",
             header = TRUE, sep = "\t") %>%
  dplyr::mutate(
    sample = stringr::str_replace(sample, "P", "E")
  )

# Combine with main table
eukaryotes_long <- eukaryotes_long %>%
  left_join(eukaryotes_sample_info, by = "sample")

eukaryotes_long %>%
 dplyr::summarise(
   dplyr::across(
     dplyr::any_of(tax_ranks_euk),
     ~sum(is.na(.x)) / length(.x)
  )
)

# Relative abundance
eukaryotes_long <-
  eukaryotes_long %>%
  dplyr::mutate(
    RA = reads / sum(reads),
    .after = reads,
    .by = sample
    )

# Rename media
eukaryotes_long <- eukaryotes_long %>%   
    mutate(media = case_when(
    media == "borgmann" ~ "Low-Nutrient",
    media == "kuhl" ~ "High-Nutrient",
    TRUE ~ media
  ))


# Calculate percentage of data present in tax columns 
# Subset the dataframe to the relevant columns
columns_of_interest_euk <- c("phylum", "class", "order", "family", "genus", "species")
data_subset_euk <- eukaryotes_long[, columns_of_interest_euk]

# Calculate the percentage of non-missing values per column
missing_percentage_euk_tax <- colSums(!is.na(data_subset_euk)) / nrow(data_subset_euk) * 100

# View the result
missing_percentage_euk_tax
```

## Ordination and PERMANOVA
```{r, warning=FALSE}
euk_analyzed <- 
eukaryotes_long %>%
  dplyr::group_by(exp) %>%
  tidyr::nest() %>%
  dplyr::mutate(
    obj = purrr::map(
      data, ~wcmd_and_adonis(.x)
    ),
    wcmd = purrr::map(
      obj, ~.x$wcmd
    ),
    permanova = purrr::map_dbl(
      obj, ~.x$adonis %>% as.data.frame %>% dplyr::slice(1) %>% dplyr::pull(5)
    )
  ) %>%
  tidyr::unnest(wcmd)


euk_analyzed_sign <- 
euk_analyzed %>%
  dplyr::group_by(exp, media) %>%
  dplyr::reframe(
    sign = unique(permanova)
  ) %>%
    dplyr::mutate(
    season = ifelse(exp %in% c(1, 2), "Winter", "Summer")
  )

conc_fac <- levels(factor(euk_analyzed$concentration_ug_L))
colors <- 
  scico::scico(length(conc_fac), end = 0.8, palette = "batlow") %>%
  colorspace::lighten(0.2)
names(colors) <- conc_fac
colors["0"] <- "grey60"

euk_wpca <-
euk_analyzed %>%
  dplyr::mutate(
    season = ifelse(exp %in% c(1, 2), "Winter", "Summer"),
    chemical = factor(
      stringr::str_to_title(chemical), 
      levels = c("Control", "Ciprofloxacin", "Propyzamide") 
    )
  ) %>%
  ggplot(aes(WCMD1, WCMD2)) +
  geom_vline(xintercept = 0, linetype = 2, linewidth = 0.2, color = "#aaaaaa") +
  geom_hline(yintercept = 0, linetype = 2, linewidth = 0.2, color = "#aaaaaa") +
  geom_point(
    aes(
      shape = chemical,
      fill = factor(concentration_ug_L)
      ),
    size = 3
  ) +
  geom_label(
    data = euk_analyzed_sign,
    aes(label = paste("p = ", round(sign, 3)), x = 0.75, y = -0.3),
    size = 7 / ggplot2:::.pt,
    fill = "#ffffff88",
    label.size = 0,
    hjust = 1,
    vjust = 0
  ) +
  scale_shape_manual(
    values = c("Control" = 21, "Ciprofloxacin" = 25, "Propyzamide" = 25)  
  )  +
  scale_fill_manual(values = colors) +
  guides(
    fill = 
      guide_legend(
        ncol = 4,
        override.aes = list(shape = 25)
        ),
    shape = 
      guide_legend(
        title = "Chemical",
        ncol = 1
        )
    ) +
  ggh4x::facet_nested_wrap(
    ~season + stringr::str_to_title(media), 
    ncol = 1,
    strip.position = "right"
    ) +
  labs(
    y = NULL,
    x = "WPCA1",
    fill = expression("Concentration (" * µg ~ L^-1 * ")"),
    shape = "Chemical"
  ) +
  theme_bw() +
  theme(
    text = element_text(size = 9),
    axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1),
    panel.grid.major = element_line(linewidth = 0.1, color = "#cccccc"),
    panel.grid.minor = element_line(linewidth = 0.05, color = "#cccccc"),
    strip.background.y = ggh4x::element_part_rect(side = "l", fill = NA),
    strip.text.y = element_text(size = 7, face = "bold"),
    legend.position = "bottom",
    legend.title.position = "top",
    legend.key.spacing.x = unit(1, "mm"),
    legend.key.spacing.y = unit(0, "mm"),
    legend.key.size = unit(4, "mm")
  )

euk_wpca

# save as png
ggsave(
  "output/eukaryotes_wpca.png",
  euk_wpca,
  width = 16.5,
  height = 16,
  units = "cm",
  dpi = 600
)

# Save as vector graphic, minor adaptions for better readability with Inkscape
ggsave(
  "output/eukaryotes_wpca.svg",
  euk_wpca,
  device = "svg",
  width = 16.5,
  height = 16,
  units = "cm",
  dpi = 600
)
```

## SIMPER
```{r, warning=FALSE, message=FALSE}
# SIMPER on phylum basis
euk_simper_phylum <- 
eukaryotes_long %>%
  dplyr::group_by(exp) %>% 
  tidyr::nest() %>%
  dplyr::mutate(
    simper_data = purrr::map(
      data, function(x) {
        df_for_simper <-
          x %>%
          dplyr::bind_rows(x)
        simper_summary(df_for_simper, tax_level = "phylum")
      }
    )
  ) %>%
  tidyr::unnest(simper_data) %>%
  dplyr::mutate(
    media = ifelse(exp %in% c(1, 3), "Low-Nutrient", "High-Nutrient"),
    season = ifelse(exp %in% c(1, 2), "Winter", "Summer"),
  ) %>%
  ggplot(aes(y = weighted_rel_change, x = phylum)) +
  geom_segment(
    mapping = aes(
      color = factor(concentration_ug_L),
      yend = 1
      ),
    linewidth = 1.25,
    position = position_dodge(0.75),
    size = 1.8
  ) +
  geom_hline(yintercept = 1, linewidth = 0.3, color = "#000000") +
  scale_color_manual(values = colors, guide = "none") +
  scale_fill_manual(values = colors, guide = "none") +
  scale_y_continuous(
    transform = scales::pseudo_log_trans(sigma = 1/128),
    breaks = c(1/256, 1/64, 1/16, 1/4, 1, 4, 16, 64, 256),
    labels = c("1/256","1/64","1/16", "1/4", "1", "4", "16", "64", "256")
  ) +
  coord_flip(
    ylim = c(1/256, 256)
  ) +
  ggh4x::facet_nested_wrap(
    ~season + stringr::str_to_title(media), 
    scales = "free_y",
    strip.position = "right",
    ncol = 1
  ) +
  labs(
    x = NULL, y = "Fold change"
  ) +
  theme_bw() +
  theme(
    text = element_text(size = 9),
    axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1),
    panel.grid.major = element_line(linewidth = 0.1, color = "#cccccc"),
    panel.grid.minor = element_line(linewidth = 0.05, color = "#cccccc"),
    axis.text.y = ggtext::element_markdown(),
    strip.text.y = element_blank(),
    strip.background.y = element_blank(),
    legend.position = "bottom"
  )


euk_simper_phylum | euk_wpca

# Save as vector graphic, minor adaptions for better readability with Inkscape
ggsave(
  "output/eukaryotes_both_phylum_level.svg",
  euk_simper_phylum | euk_wpca,
  device = "svg",
  width = 16.5,
  height = 16,
  units = "cm",
  dpi = 600
)

# SIMPER on family basis
euk_simper_family <- 
eukaryotes_long %>%
  dplyr::group_by(exp) %>% 
  tidyr::nest() %>%
  dplyr::mutate(
    simper_data = purrr::map(
      data, function(x) {
        df_for_simper <-
          x %>%
          dplyr::bind_rows(x)
        simper_summary(df_for_simper, tax_level = "family")
      }
    )
  ) %>%
  tidyr::unnest(simper_data) %>%
  dplyr::mutate(
    media = ifelse(exp %in% c(1, 3), "Low", "High"),
    season = ifelse(exp %in% c(1, 2), "Winter", "Summer"),
  ) %>%
  ggplot(aes(y = weighted_rel_change, x = family)) +
  geom_segment(
    mapping = aes(
      color = factor(concentration_ug_L),
      yend = 1
      ),
    linewidth = 1.25,
    position = position_dodge(0.75),
    size = 1.8
  ) +
  geom_hline(yintercept = 1, linewidth = 0.3, color = "#000000") +
  scale_color_manual(values = colors, guide = "none") +
  scale_fill_manual(values = colors, guide = "none") +
  scale_y_continuous(
    transform = scales::pseudo_log_trans(sigma = 1/128),
    breaks = c(1/64, 1/16, 1/4, 1, 4, 16, 64),
    labels = c("1/64","1/16", "1/4", "1", "4", "16", "64")
  ) +
  coord_flip(
    ylim = c(1/64, 64)
  ) +
  ggh4x::facet_nested_wrap(
    ~season + stringr::str_to_title(media), 
    scales = "free_y",
    strip.position = "right",
    ncol = 1
  ) +
  labs(
    x = NULL, y = "Fold change"
  ) +
  theme_bw() +
  theme(
    text = element_text(size = 9),
    axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1),
    panel.grid.major = element_line(linewidth = 0.1, color = "#cccccc"),
    panel.grid.minor = element_line(linewidth = 0.05, color = "#cccccc"),
    axis.text.y = ggtext::element_markdown(),
    strip.text.y = element_blank(),
    strip.background.y = element_blank(),
    legend.position = "bottom"
  )

euk_simper_family | euk_wpca

# Save as vector graphic, minor adaptions for better readability with Inkscape
ggsave(
  "output/eukaryotes_both_family_level.svg",
  euk_simper_family | euk_wpca,
  device = "svg",
  width = 16.5,
  height = 16,
  units = "cm",
  dpi = 600
)

```


## Diversity indices 
```{r, warning=FALSE, message=FALSE}
# Diversity indices, only descriptive 
eukaryotes_long %>%
  dplyr::group_by(exp, concentration_ug_L) %>%
  dplyr::summarise(
    shannon = vegan::diversity(RA),
    simpson = vegan::diversity(RA, index = "simpson"),
    richness = sum(RA > 0),
    evenness = shannon / log(richness)
  ) %>%
  print(n=50)

# Process the main dataset 
euk_diversity <- eukaryotes_long %>%
  dplyr::group_by(exp, concentration_ug_L) %>%
  dplyr::summarise(
    shannon = vegan::diversity(RA),
    simpson = vegan::diversity(RA, index = "simpson"),
    richness = sum(RA > 0),
    evenness = shannon / log(richness),
    .groups = "drop"
  ) %>%
  tidyr::pivot_longer(c(shannon, simpson, richness, evenness)) %>%
  dplyr::mutate(
    name = stringr::str_to_title(name),
    exp = factor(exp, levels = c("4", "3", "2", "1"))
  )


# Plot 
euk_diversity_indices <-
  ggplot() +
  geom_line(data = euk_diversity, aes(concentration_ug_L, value, color = name)) +
  stat_smooth(data = euk_diversity, aes(concentration_ug_L, value, color = name), method = "lm", se = TRUE) +
  scale_x_continuous(
    trans = scales::pseudo_log_trans(),
    breaks = c(0, 1, 10, 100, 1000, 10000),
    labels = c("0", "1", "10", "100", "1000", "10000")  
  ) +

  facet_grid(name ~ exp, scales = "free", labeller = labeller(exp = exp_labels)) +

  labs(
    y = NULL,
    x = expression("Concentration (" * µg ~ L^-1 * ")"),
    shape = "Chemical"
  ) +

  theme(
    legend.position = "none",
    panel.grid.minor.x = element_blank(),
    panel.grid.minor.y = element_blank(),
    axis.text.x = element_text(angle = 45, hjust = 1) 
  )


euk_diversity_indices

ggsave(
  "output/eukaryotes_diversity_indices.png",
  euk_diversity_indices,
  width = 16.5,
  height = 16,
  units = "cm",
  dpi = 600
)

# Save as vector graphic, minor adaptions for better readability with Inkscape
ggsave(
  "output/eukaryotes_diversity_indices.svg",
  euk_diversity_indices,
  device = "svg",
  width = 16.5,
  height = 16,
  units = "cm",
  dpi = 600
)

```

## Stacked bar plots
```{r, warning=FALSE}
# Stacked bar plot
# Renaming for plot
eukaryotes_long <- eukaryotes_long %>%
  mutate(exp = factor(exp, 
                      levels = c(1, 2, 3, 4), 
                      labels = c("Winter Low-Nutrient", 
                                 "Winter High-Nutrient", 
                                 "Summer Low-Nutrient",
                                 "Summer High-Nutrient")))

eukaryotes_long <- eukaryotes_long %>%
  mutate(
    sample = factor(sample, levels = unique(sample)),  
    concentration_ug_L = factor(concentration_ug_L, levels = c("0", "1", "10", "100", "1000", "10000"))  
  )

sample_to_concentration <- setNames(eukaryotes_long$concentration_ug_L, eukaryotes_long$sample)

euk_barplot_phylum <- eukaryotes_long %>%
  group_by(sample, phylum, exp) %>%
  summarise(RA = sum(RA), .groups = "drop") %>%
  ggplot(aes(x = sample, y = RA, fill = phylum)) +
  geom_bar(stat = "identity") +
  labs(x = "Sample", y = "Abundance", fill = "Phylum") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
  scale_fill_manual(values = custom_palette) +
  facet_wrap(~exp, ncol = 2, scales = "free_x") + 
  scale_x_discrete(labels = function(x) {
    concentration_mapping <- setNames(eukaryotes_long$concentration_ug_L, eukaryotes_long$sample)
    concentration_mapping[x]  
  })
  

euk_barplot_phylum

ggsave(
  "output/euk_barplot_phylum.png",
  euk_barplot_phylum,
  width = 16.5,
  height = 16,
  units = "cm",
  dpi = 600,
  bg = "white" 
)

# Save as vector graphic, minor adaptions for better readability with Inkscape
ggsave(
  "output/euk_barplot_phylum.svg",
  euk_barplot_phylum,
  device = "svg",
  width = 16.5,
  height = 16,
  units = "cm",
  dpi = 600
)

# Barplot with chlorophyta family
euk_barplot_chlorophyta <- eukaryotes_long %>%
  filter(phylum == "Chlorophyta") %>%
  filter(!is.na(RA) & !is.na(family)) %>%
  group_by(sample, family, exp) %>%
  summarise(RA = sum(RA, na.rm = TRUE), .groups = "drop") %>%
  group_by(sample, exp) %>%
  mutate(RA_normalized = RA / sum(RA, na.rm = TRUE)) %>%
  ungroup() %>%
  ggplot(aes(x = sample, y = RA_normalized, fill = family)) +
  geom_bar(stat = "identity") +
  labs(x = "Sample", y = "Relative Abundance (normalized)", fill = "Family") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
  scale_fill_manual(values = custom_palette) +
  facet_wrap(~exp, ncol = 2, scales = "free_x") + 
  scale_x_discrete(labels = function(x) {
    concentration_mapping <- setNames(eukaryotes_long$concentration_ug_L, eukaryotes_long$sample)
    concentration_mapping[x]  
  })

  
euk_barplot_chlorophyta

ggsave(
  "output/euk_barplot_chlorophyta.png",
  euk_barplot_chlorophyta,
  width = 16.5,
  height = 16,
  units = "cm",
  dpi = 600,
  bg = "white" 
)

# Save as vector graphic, minor adaptions for better readability with Inkscape
ggsave(
  "output/euk_barplot_chlorophyta.svg",
  euk_barplot_chlorophyta,
  device = "svg",
  width = 16.5,
  height = 16,
  units = "cm",
  dpi = 600
)
```


## Eukaryotes field
```{r, warning=FALSE}
# Extract ASVs with too less findings
rows_to_keep <-
eukaryotes_field %>% 
  dplyr::select_if(is.numeric) %>%
  rowSums() > 5

# Percentage removed by omitting row sums smaller or equal to 5
paste(round(100 * (1 - sum(rows_to_keep) / nrow(eukaryotes_field)), 2), "%")

eukaryotes_field <- eukaryotes_field[rows_to_keep, ]

# Add taxonomny in columns
eukaryotes_field_long <-
  eukaryotes_field %>%
  tidyr::separate(
    taxonomy_eukaryotes,
    into = tax_ranks_euk,
    sep = ","
  ) %>%
  dplyr::mutate(
    dplyr::across(
      dplyr::any_of(tax_ranks_euk),
      ~stringr::str_remove(.x, ".*:")
    )
  ) %>%
  tidyr::pivot_longer(
    cols = dplyr::starts_with("E", ignore.case = FALSE),
    values_to = "reads",
    names_to = "sample"
  )

# Relative Abundance
eukaryotes_field_long <-
  eukaryotes_field_long %>%
  dplyr::mutate(
    RA = reads / sum(reads),
    .after = reads,
    .by = sample
    )

# Stacked bar plot - phylum level
euk_field_barplot_phylum <- eukaryotes_field_long %>%
  group_by(sample, phylum) %>%
  summarise(RA = sum(RA), .groups = "drop") %>%
  ggplot(aes(x = sample, y = RA, fill = phylum)) +
  geom_bar(stat = "identity") +
  labs(x = NULL, y = "Abundance", fill = "Phylum") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
  scale_fill_manual(values = custom_palette) +
  scale_x_discrete(labels = c("E13" = "Winter", "E36" = "Summer"))


euk_field_barplot_phylum

ggsave(
  "output/eukaryotes_field_phylum.png",
  euk_field_barplot_phylum,
  width = 16.5,
  height = 16,
  units = "cm",
  dpi = 600,
  bg = "white" 
)

# Save as vector graphic, minor adaptions for better readability with Inkscape
ggsave(
  "output/eukaryotes_field_phylum.svg",
  euk_field_barplot_phylum,
  device = "svg",
  width = 16.5,
  height = 16,
  units = "cm",
  dpi = 600
)

# Diversity indices
eukaryotes_field_long %>%
  dplyr::group_by(sample) %>%
  dplyr::summarise(
    shannon = vegan::diversity(RA),
    simpson = vegan::diversity(RA, index = "simpson"),
    richness = sum(RA > 0),
    evenness = shannon / log(richness)
  ) 
```

# Mantel test to test correlation of functional and structural endpoints

## Prokaryotes
```{r, warning=FALSE}
# prepare data
func <- mean_biofilm_endpoints %>%
  dplyr::select(mean_afdw, mean_chla, mean_chlb, mean_chlc)

func <- cbind(func, prokaryotes_sample_info)

func <- func %>%
  dplyr::select(-c(exp, media, chemical, day, concentration_ug_L))

func_2 <- func[, -5]
rownames(func_2) <- func[,5]
  
# invert prok ASV table
prokaryotes_long <- prokaryotes_long %>%
  dplyr::select(-c(kingdom, genus, class, order, family, species,    exp, media, phylum, reads, chemical, day, concentration_ug_L))

prok_wide <- prokaryotes_long %>%
    pivot_wider(
    id_cols = sample,         
    names_from = asv,        
    values_from = RA,         
    values_fill = 0            
  )

prok_wide <- prok_wide %>%
  tibble::column_to_rownames("sample") %>%
  as.matrix()

# Experiment 1
func_dist_exp1 <- func %>%
  slice(1:5)

prok_wide_exp1 <- prok_wide[1:5, ]

# Distance matrices
func_dist_exp1 <- dist(func_dist_exp1, method = "euclidean")
prok_dist_exp1 <- vegan::vegdist(prok_wide_exp1, method = "bray")

# Mantel test
set.seed(123)

mantel_result <- vegan::mantel(prok_dist_exp1, func_dist_exp1, method = "spearman", permutations = 999)

print(mantel_result)

# Epx 2
func_dist_exp2 <- func_2 %>%
  slice(6:10)

prok_wide_exp2 <- prok_wide[18:22, ]

func_dist_exp2 <- dist(func_dist_exp2, method = "euclidean")
prok_dist_exp2 <- vegan::vegdist(prok_wide_exp2, method = "bray")
set.seed(123)
mantel_result <- vegan::mantel(prok_dist_exp2, func_dist_exp2, method = "spearman", permutations = 999)
print(mantel_result)

# Exp 3
func_dist_exp3 <- func_2 %>%
  slice(11:16)

prok_wide_exp3 <- prok_wide[12:17, ]

func_dist_exp3 <- dist(func_dist_exp3, method = "euclidean")
prok_dist_exp3 <- vegan::vegdist(prok_wide_exp3, method = "bray")
set.seed(123)
mantel_result <- vegan::mantel(prok_dist_exp3, func_dist_exp3, method = "spearman", permutations = 999)
print(mantel_result)

# Epx 4
func_dist_exp4 <- func_2 %>%
  slice(17:22)

prok_wide_exp4 <- prok_wide[6:11, ]

func_dist_exp4 <- dist(func_dist_exp4, method = "euclidean")
prok_dist_exp4 <- vegan::vegdist(prok_wide_exp4, method = "bray")
set.seed(123)
mantel_result <- vegan::mantel(prok_dist_exp4, func_dist_exp4, method = "spearman", permutations = 999)
print(mantel_result)

# no correlations between functional and structural values for prokaryotes
```

## Eukaryotes
```{r, warning=FALSE}
# invert prok ASV table
eukaryotes_long <- eukaryotes_long %>%
  dplyr::select(-c(kingdom, genus, domain, class, order, family, species,    exp, media, phylum, reads, chemical, day, concentration_ug_L))

euk_wide <- eukaryotes_long %>%
    pivot_wider(
    id_cols = sample,         
    names_from = asv,        
    values_from = RA,         
    values_fill = 0            
  )

euk_wide <- euk_wide %>%
  tibble::column_to_rownames("sample") %>%
  as.matrix()

# Experiment 1
euk_wide_exp1 <- euk_wide[1:5, ]

# Distance matrices
euk_dist_exp1 <- vegan::vegdist(euk_wide_exp1, method = "bray")

# Mantel test
set.seed(123)

mantel_result <- vegan::mantel(euk_dist_exp1, func_dist_exp1, method = "spearman", permutations = 999)

print(mantel_result)

# Epx 2
euk_wide_exp2 <- euk_wide[18:22, ]

euk_dist_exp2 <- vegan::vegdist(euk_wide_exp2, method = "bray")
set.seed(123)
mantel_result <- vegan::mantel(euk_dist_exp2, func_dist_exp2, method = "spearman", permutations = 999)
print(mantel_result)

# Exp 3
euk_wide_exp3 <- euk_wide[12:17, ]

euk_dist_exp3 <- vegan::vegdist(euk_wide_exp3, method = "bray")
set.seed(123)
mantel_result <- vegan::mantel(euk_dist_exp3, func_dist_exp3, method = "spearman", permutations = 999)
print(mantel_result)

# Epx 4
euk_wide_exp4 <- euk_wide[6:11, ]

euk_dist_exp4 <- vegan::vegdist(euk_wide_exp4, method = "bray")
set.seed(123)
mantel_result <- vegan::mantel(euk_dist_exp4, func_dist_exp4, method = "spearman", permutations = 999)
print(mantel_result)

# no correlations between functional and structural values for eukaryotes
```

# Chemical analyses
```{r, warning=FALSE}
chemical_analyses <-
  read.table("data/chemical_analyses.txt",
             header = TRUE, sep = "\t") %>%
  tibble::tibble()

# One contamination in exp 1 negative control, 3 days later measured concentration again <LOQ. 
chemical_analyses <- chemical_analyses %>%   
  dplyr::filter(treatment != "negative_control") 
  

chemical_analyses$measured_concentration_ug_L <-
  as.numeric(chemical_analyses$measured_concentration_ug_L)

# Compute mean measured concentrations for the respective experiments
mean_concentrations <-
chemical_analyses %>%
  dplyr::filter(exp %in% c("1", "2", "3", "4"), 
                nominal_concentration_ug_L %in% c("10", "1000", "10000")) %>%
  dplyr::group_by(exp, treatment, nominal_concentration_ug_L) %>%
  dplyr::summarise(mean = mean(measured_concentration_ug_L, na.rm = TRUE), .groups = "drop")

```

